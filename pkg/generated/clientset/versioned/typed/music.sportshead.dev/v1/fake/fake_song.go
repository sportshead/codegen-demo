// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	v1 "github.com/sportshead/codegen-demo/pkg/apis/music.sportshead.dev/v1"
	musicsportsheaddevv1 "github.com/sportshead/codegen-demo/pkg/generated/applyconfiguration/music.sportshead.dev/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeSongs implements SongInterface
type FakeSongs struct {
	Fake *FakeCoolMusicV1
	ns   string
}

var songsResource = v1.SchemeGroupVersion.WithResource("songs")

var songsKind = v1.SchemeGroupVersion.WithKind("Song")

// Get takes name of the song, and returns the corresponding song object, and an error if there is any.
func (c *FakeSongs) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.Song, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(songsResource, c.ns, name), &v1.Song{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.Song), err
}

// List takes label and field selectors, and returns the list of Songs that match those selectors.
func (c *FakeSongs) List(ctx context.Context, opts metav1.ListOptions) (result *v1.SongList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(songsResource, songsKind, c.ns, opts), &v1.SongList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1.SongList{ListMeta: obj.(*v1.SongList).ListMeta}
	for _, item := range obj.(*v1.SongList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested songs.
func (c *FakeSongs) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(songsResource, c.ns, opts))

}

// Create takes the representation of a song and creates it.  Returns the server's representation of the song, and an error, if there is any.
func (c *FakeSongs) Create(ctx context.Context, song *v1.Song, opts metav1.CreateOptions) (result *v1.Song, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(songsResource, c.ns, song), &v1.Song{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.Song), err
}

// Update takes the representation of a song and updates it. Returns the server's representation of the song, and an error, if there is any.
func (c *FakeSongs) Update(ctx context.Context, song *v1.Song, opts metav1.UpdateOptions) (result *v1.Song, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(songsResource, c.ns, song), &v1.Song{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.Song), err
}

// Delete takes name of the song and deletes it. Returns an error if one occurs.
func (c *FakeSongs) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(songsResource, c.ns, name, opts), &v1.Song{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeSongs) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(songsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1.SongList{})
	return err
}

// Patch applies the patch and returns the patched song.
func (c *FakeSongs) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.Song, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(songsResource, c.ns, name, pt, data, subresources...), &v1.Song{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.Song), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied song.
func (c *FakeSongs) Apply(ctx context.Context, song *musicsportsheaddevv1.SongApplyConfiguration, opts metav1.ApplyOptions) (result *v1.Song, err error) {
	if song == nil {
		return nil, fmt.Errorf("song provided to Apply must not be nil")
	}
	data, err := json.Marshal(song)
	if err != nil {
		return nil, err
	}
	name := song.Name
	if name == nil {
		return nil, fmt.Errorf("song.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(songsResource, c.ns, *name, types.ApplyPatchType, data), &v1.Song{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.Song), err
}
